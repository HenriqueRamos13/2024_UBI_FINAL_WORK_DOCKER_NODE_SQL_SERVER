#!/bin/bash

# Definindo os tipos como uma lista de nomes de controllers
types="User UserProjects Project ProjectInfos ProjectInfo ProjectKeywords Keywords ProjectScientificDomains ScientificDomain ProjectScientificAreas ScientificArea Entity EntityContactPoints ContactPoint ContactPointInfo Funding EntityFundings Program ProgramsFundings ProjectFundings Drone DroneParts DroneHasParts"

# Criando os arquivos controllers
for type in $types
do
    # Definindo o nome do arquivo
    filename="${type}.controller.ts"
    lowerType=$(echo "$type" | tr '[:upper:]' '[:lower:]')  # Converte o nome do tipo para minúsculas

    # Usando echo para gerar o conteúdo do arquivo
    echo "import { routeConfig } from \"../utils/decorators/Route.decorator\";" > "$filename"
    echo "import METHOD from \"../utils/enums/methods.enum\";" >> "$filename"
    echo "import PassportController from \"./Passport.controller\";" >> "$filename"
    echo "import { Public } from \"../utils/decorators/Public.decorator\";" >> "$filename"
    echo "import { RequestParams } from \"../types\";" >> "$filename"
    echo "" >> "$filename"
    echo "const CONTROLLER_MICROSSERVICE_ID = 1;" >> "$filename"
    echo "" >> "$filename"
    echo "class ${type}Controller {" >> "$filename"
    echo "  @routeConfig({" >> "$filename"
    echo "    method: METHOD.GET," >> "$filename"
    echo "    path: \"/$lowerType\"," >> "$filename"
    echo "    id: CONTROLLER_MICROSSERVICE_ID," >> "$filename"
    echo "  })" >> "$filename"
    echo "  @Public()" >> "$filename"
    echo "  public async get({ req, res, next }: RequestParams): Promise<void> {" >> "$filename"
    echo "    res.json({ message: \"GET\" });" >> "$filename"
    echo "  }" >> "$filename"
    echo "" >> "$filename"
    echo "  @routeConfig({" >> "$filename"
    echo "    method: METHOD.POST," >> "$filename"
    echo "    path: \"/$lowerType\"," >> "$filename"
    echo "    id: CONTROLLER_MICROSSERVICE_ID," >> "$filename"
    echo "  })" >> "$filename"
    echo "  @Public()" >> "$filename"
    echo "  public async post({ req, res, next }: RequestParams): Promise<void> {" >> "$filename"
    echo "    res.json({ message: \"POST\" });" >> "$filename"
    echo "  }" >> "$filename"
    echo "" >> "$filename"
    echo "  @routeConfig({" >> "$filename"
    echo "    method: METHOD.PUT," >> "$filename"
    echo "    path: \"/$lowerType\"," >> "$filename"
    echo "    id: CONTROLLER_MICROSSERVICE_ID," >> "$filename"
    echo "  })" >> "$filename"
    echo "  @Public()" >> "$filename"
    echo "  public async put({ req, res, next }: RequestParams): Promise<void> {" >> "$filename"
    echo "    res.json({ message: \"PUT\" });" >> "$filename"
    echo "  }" >> "$filename"
    echo "" >> "$filename"
    echo "  @routeConfig({" >> "$filename"
    echo "    method: METHOD.PATCH," >> "$filename"
    echo "    path: \"/$lowerType\"," >> "$filename"
    echo "    id: CONTROLLER_MICROSSERVICE_ID," >> "$filename"
    echo "  })" >> "$filename"
    echo "  @Public()" >> "$filename"
    echo "  public async patch({ req, res, next }: RequestParams): Promise<void> {" >> "$filename"
    echo "    res.json({ message: \"PATCH\" });" >> "$filename"
    echo "  }" >> "$filename"
    echo "" >> "$filename"
    echo "  @routeConfig({" >> "$filename"
    echo "    method: METHOD.DELETE," >> "$filename"
    echo "    path: \"/$lowerType\"," >> "$filename"
    echo "    id: CONTROLLER_MICROSSERVICE_ID," >> "$filename"
    echo "  })" >> "$filename"
    echo "  @Public()" >> "$filename"
    echo "  public async delete({ req, res, next }: RequestParams): Promise<void> {" >> "$filename"
    echo "    res.json({ message: \"DELETE\" });" >> "$filename"
    echo "  }" >> "$filename"
    echo "}" >> "$filename"
    echo "" >> "$filename"
    echo "export default ${type}Controller;" >> "$filename"
done

echo "Controllers foram criados com sucesso."
